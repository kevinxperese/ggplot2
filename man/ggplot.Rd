% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.r
\name{ggplot}
\alias{ggplot}
\title{Create a new ggplot}
\usage{
ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())
}
\arguments{
\item{data}{Default dataset to use for plot. If not already a data.frame,
will be converted to one by \code{\link[=fortify]{fortify()}}. If not specified,
must be supplied in each layer added to the plot.}

\item{mapping}{Default list of aesthetic mappings to use for plot.
If not specified, must be supplied in each layer added to the plot.}

\item{...}{Other arguments passed on to methods. Not currently used.}

\item{environment}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} Used prior to tidy
evaluation.}
}
\description{
\code{ggplot()} initializes a ggplot object. It can be used to
declare the input data frame for a graphic and to specify the
set of plot aesthetics intended to be common throughout all
subsequent layers unless specifically overridden.
}
\details{
\code{ggplot()} is used to construct the initial plot object
and is almost always followed by a plus sign (\code{+}) to add 
components to the plot. There are three common patterns used to
invoke \code{ggplot()}:
\itemize{
\item \verb{ggplot(df, aes(x, y, other aesthetics))}
\item \code{ggplot(df)}
\item \code{ggplot()}
}

The first pattern is recommended if all layers use the same
data and the same set of aesthetics, although this pattern
can also be used when adding a layer using data from another
data frame. 

The second pattern specifies the default data frame to use for
the plot, but no aesthetics are defined up front. This is useful 
when one data frame is used predominantly in the plot, but the 
aesthetics may vary from one layer to another. 
  
The third pattern initializes a skeleton \code{ggplot} object which
is fleshed out as layers are added. This is useful when
multiple data frames are used to produce different layers, as
is often the case in complex graphics.
}
\examples{
# Create a data frame with some sample data, then create a data frame
# containing the mean for each group in the sample data.
set.seed(1)
sample_df <- data.frame(
  group = factor(rep(letters[1:3], each = 10)),
  value = rnorm(30)
)
group_means_df <- do.call(rbind, lapply(split(sample_df, sample_df$group), function(d) {
  data.frame(group_mean = mean(d$value), group = d$group)
}))

# Pattern 1
# The group means data frame is used to plot larger red points on top
# of the sample data. Note that we don't need to supply `data =` or `mapping =`
# in each layer because the arguments are passed into ggplot() in the default
# positions.
ggplot(sample_df, aes(x = group, y = value)) +
  geom_point() +
  geom_point(group_means_df, aes(y = group_mean), colour = 'red', size = 3)

# Pattern 2
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(sample_df) +
  geom_point(aes(x = group, y = value)) +
  geom_point(group_means_df, aes(x = group, y = group_mean), colour = 'red', size = 3)

# Pattern 3
# Alternatively, we can fully specify the plot in each layer. This
# can be particularly useful when working with complex, multi-dataset graphics
ggplot() +
  geom_point(sample_df, aes(x = group, y = value)) +
  geom_point(group_means_df, aes(x = group, y = group_mean), colour = 'red', size = 3)
}
